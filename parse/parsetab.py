
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '920DEE0EEE50BD3BB03EF6615051A375'
    
_lr_action_items = {'inherits':([6,],[8,]),'fi':([34,37,40,44,49,54,56,57,62,84,86,89,90,91,92,94,95,97,98,100,105,115,123,124,127,130,135,136,139,141,],[-56,-53,-54,-55,-52,-46,-41,-40,-50,-51,-28,-48,-49,-44,-47,-42,-43,-45,-17,-23,-31,-22,-36,-27,-19,136,-18,-26,-21,-20,]),'false':([29,35,36,38,42,43,45,46,47,67,68,69,70,72,73,75,76,77,78,80,81,87,88,103,114,116,119,120,134,137,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'rbrace':([9,11,15,17,20,22,34,37,40,44,49,54,56,57,62,64,84,86,87,89,90,91,92,94,95,97,98,100,102,105,111,115,118,123,124,127,135,136,139,141,],[14,16,21,-9,28,-8,-56,-53,-54,-55,-52,-46,-41,-40,-50,86,-51,-28,-30,-48,-49,-44,-47,-42,-43,-45,-17,-23,117,-31,-29,-22,129,-36,-27,-19,-18,-26,-21,-20,]),'in':([34,37,40,44,49,54,56,57,58,59,62,84,86,89,90,91,92,94,95,97,98,100,105,106,107,115,123,124,127,131,135,136,139,141,],[-56,-53,-54,-55,-52,-46,-41,-40,81,-33,-50,-51,-28,-48,-49,-44,-47,-42,-43,-45,-17,-23,-31,-32,-34,-22,-36,-27,-19,-35,-18,-26,-21,-20,]),'colon':([13,24,27,31,60,109,],[18,30,33,51,83,122,]),'at':([34,37,40,44,48,49,54,55,56,57,61,62,63,65,66,84,86,89,90,91,92,94,95,97,98,100,101,102,104,105,112,115,118,123,124,127,130,131,135,136,139,140,141,],[-56,-53,-54,-55,71,-52,71,71,71,-40,71,71,71,71,71,-51,-28,71,71,71,71,71,71,71,71,-23,71,71,71,71,71,-22,71,-36,-27,-19,71,71,-18,-26,-21,71,-20,]),'tilde':([29,35,36,38,42,43,45,46,47,67,68,69,70,72,73,75,76,77,78,80,81,87,88,103,114,116,119,120,134,137,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'if':([29,35,36,38,42,43,45,46,47,67,68,69,70,72,73,75,76,77,78,80,81,87,88,103,114,116,119,120,134,137,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'le':([34,37,40,44,48,49,54,55,56,57,61,62,63,65,66,84,86,89,90,91,92,94,95,97,98,100,101,102,104,105,112,115,118,123,124,127,130,131,135,136,139,140,141,],[-56,-53,-54,-55,67,-52,-46,67,-41,-40,67,67,67,67,67,-51,-28,None,None,-44,None,-42,-43,-45,67,-23,67,67,67,67,67,-22,67,-36,-27,-19,67,67,-18,-26,-21,67,-20,]),'divide':([34,37,40,44,48,49,54,55,56,57,61,62,63,65,66,84,86,89,90,91,92,94,95,97,98,100,101,102,104,105,112,115,118,123,124,127,130,131,135,136,139,140,141,],[-56,-53,-54,-55,75,-52,-46,75,-41,-40,75,75,75,75,75,-51,-28,75,75,-44,75,75,75,-45,75,-23,75,75,75,75,75,-22,75,-36,-27,-19,75,75,-18,-26,-21,75,-20,]),'rarrow':([133,],[137,]),'isvoid':([29,35,36,38,42,43,45,46,47,67,68,69,70,72,73,75,76,77,78,80,81,87,88,103,114,116,119,120,134,137,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'larrow':([23,49,107,],[29,76,120,]),'lt':([34,37,40,44,48,49,54,55,56,57,61,62,63,65,66,84,86,89,90,91,92,94,95,97,98,100,101,102,104,105,112,115,118,123,124,127,130,131,135,136,139,140,141,],[-56,-53,-54,-55,70,-52,-46,70,-41,-40,70,70,70,70,70,-51,-28,None,None,-44,None,-42,-43,-45,70,-23,70,70,70,70,70,-22,70,-36,-27,-19,70,70,-18,-26,-21,70,-20,]),'esac':([110,121,132,],[123,-38,-37,]),'new':([29,35,36,38,42,43,45,46,47,67,68,69,70,72,73,75,76,77,78,80,81,87,88,103,114,116,119,120,134,137,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'type':([4,8,18,30,33,39,51,71,83,122,],[6,10,23,50,53,57,79,93,107,133,]),'$end':([2,3,5,7,],[0,-1,-3,-2,]),'then':([34,37,40,44,49,54,55,56,57,62,84,86,89,90,91,92,94,95,97,98,100,105,115,123,124,127,135,136,139,141,],[-56,-53,-54,-55,-52,-46,80,-41,-40,-50,-51,-28,-48,-49,-44,-47,-42,-43,-45,-17,-23,-31,-22,-36,-27,-19,-18,-26,-21,-20,]),'string':([29,35,36,38,42,43,45,46,47,67,68,69,70,72,73,75,76,77,78,80,81,87,88,103,114,116,119,120,134,137,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'equals':([34,37,40,44,48,49,54,55,56,57,61,62,63,65,66,84,86,89,90,91,92,94,95,97,98,100,101,102,104,105,112,115,118,123,124,127,130,131,135,136,139,140,141,],[-56,-53,-54,-55,68,-52,-46,68,-41,-40,68,68,68,68,68,-51,-28,None,None,-44,None,-42,-43,-45,68,-23,68,68,68,68,68,-22,68,-36,-27,-19,68,68,-18,-26,-21,68,-20,]),'else':([34,37,40,44,49,54,56,57,62,84,86,89,90,91,92,94,95,97,98,100,104,105,115,123,124,127,135,136,139,141,],[-56,-53,-54,-55,-52,-46,-41,-40,-50,-51,-28,-48,-49,-44,-47,-42,-43,-45,-17,-23,119,-31,-22,-36,-27,-19,-18,-26,-21,-20,]),'let':([29,35,36,38,42,43,45,46,47,67,68,69,70,72,73,75,76,77,78,80,81,87,88,103,114,116,119,120,134,137,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'lparen':([13,29,35,36,38,42,43,45,46,47,49,67,68,69,70,72,73,75,76,77,78,80,81,87,88,96,103,114,116,119,120,125,134,137,],[19,42,42,42,42,42,42,42,42,42,77,42,42,42,42,42,42,42,42,42,42,42,42,42,42,114,42,42,42,42,42,134,42,42,]),'not':([29,35,36,38,42,43,45,46,47,67,68,69,70,72,73,75,76,77,78,80,81,87,88,103,114,116,119,120,134,137,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'integer':([29,35,36,38,42,43,45,46,47,67,68,69,70,72,73,75,76,77,78,80,81,87,88,103,114,116,119,120,134,137,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'true':([29,35,36,38,42,43,45,46,47,67,68,69,70,72,73,75,76,77,78,80,81,87,88,103,114,116,119,120,134,137,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'class':([0,5,],[4,4,]),'pool':([34,37,40,44,49,54,56,57,62,84,86,89,90,91,92,94,95,97,98,100,105,112,115,123,124,127,135,136,139,141,],[-56,-53,-54,-55,-52,-46,-41,-40,-50,-51,-28,-48,-49,-44,-47,-42,-43,-45,-17,-23,-31,124,-22,-36,-27,-19,-18,-26,-21,-20,]),'case':([29,35,36,38,42,43,45,46,47,67,68,69,70,72,73,75,76,77,78,80,81,87,88,103,114,116,119,120,134,137,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'lbrace':([6,10,29,35,36,38,42,43,45,46,47,50,67,68,69,70,72,73,75,76,77,78,79,80,81,87,88,103,114,116,119,120,134,137,],[9,15,46,46,46,46,46,46,46,46,46,78,46,46,46,46,46,46,46,46,46,46,103,46,46,46,46,46,46,46,46,46,46,46,]),'rparen':([19,25,26,34,37,40,44,49,52,53,54,56,57,61,62,77,84,86,89,90,91,92,94,95,97,98,99,100,101,105,114,115,123,124,126,127,128,134,135,136,138,139,141,],[24,31,-15,-56,-53,-54,-55,-52,-14,-16,-46,-41,-40,84,-50,100,-51,-28,-48,-49,-44,-47,-42,-43,-45,-17,115,-23,-25,-31,127,-22,-36,-27,135,-19,-24,139,-18,-26,141,-21,-20,]),'semi':([1,12,14,16,21,23,28,34,37,40,44,48,49,54,56,57,62,65,84,86,89,90,91,92,94,95,97,98,100,105,108,115,117,123,124,127,129,135,136,139,140,141,],[5,17,-4,-5,-6,-10,-7,-56,-53,-54,-55,-11,-52,-46,-41,-40,-50,87,-51,-28,-48,-49,-44,-47,-42,-43,-45,-17,-23,-31,121,-22,-13,-36,-27,-19,-12,-18,-26,-21,-39,-20,]),'of':([34,37,40,44,49,54,56,57,62,63,84,86,89,90,91,92,94,95,97,98,100,105,115,123,124,127,135,136,139,141,],[-56,-53,-54,-55,-52,-46,-41,-40,-50,85,-51,-28,-48,-49,-44,-47,-42,-43,-45,-17,-23,-31,-22,-36,-27,-19,-18,-26,-21,-20,]),'times':([34,37,40,44,48,49,54,55,56,57,61,62,63,65,66,84,86,89,90,91,92,94,95,97,98,100,101,102,104,105,112,115,118,123,124,127,130,131,135,136,139,140,141,],[-56,-53,-54,-55,69,-52,-46,69,-41,-40,69,69,69,69,69,-51,-28,69,69,-44,69,69,69,-45,69,-23,69,69,69,69,69,-22,69,-36,-27,-19,69,69,-18,-26,-21,69,-20,]),'while':([29,35,36,38,42,43,45,46,47,67,68,69,70,72,73,75,76,77,78,80,81,87,88,103,114,116,119,120,134,137,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'plus':([34,37,40,44,48,49,54,55,56,57,61,62,63,65,66,84,86,89,90,91,92,94,95,97,98,100,101,102,104,105,112,115,118,123,124,127,130,131,135,136,139,140,141,],[-56,-53,-54,-55,72,-52,-46,72,-41,-40,72,72,72,72,72,-51,-28,72,72,-44,72,-42,-43,-45,72,-23,72,72,72,72,72,-22,72,-36,-27,-19,72,72,-18,-26,-21,72,-20,]),'dot':([34,37,40,44,48,49,54,55,56,57,61,62,63,65,66,84,86,89,90,91,92,93,94,95,97,98,100,101,102,104,105,112,115,118,123,124,127,130,131,135,136,139,140,141,],[-56,-53,-54,-55,74,-52,74,74,74,-40,74,74,74,74,74,-51,-28,74,74,74,74,113,74,74,74,74,-23,74,74,74,74,74,-22,74,-36,-27,-19,74,74,-18,-26,-21,74,-20,]),'comma':([26,34,37,40,44,49,53,54,56,57,59,62,84,86,89,90,91,92,94,95,97,98,100,101,105,107,115,123,124,127,131,135,136,139,141,],[32,-56,-53,-54,-55,-52,-16,-46,-41,-40,82,-50,-51,-28,-48,-49,-44,-47,-42,-43,-45,-17,-23,116,-31,-34,-22,-36,-27,-19,-35,-18,-26,-21,-20,]),'identifier':([9,15,17,19,29,32,35,36,38,41,42,43,45,46,47,67,68,69,70,72,73,74,75,76,77,78,80,81,82,85,87,88,103,113,114,116,119,120,121,134,137,],[13,13,13,27,49,27,49,49,49,60,49,49,49,49,49,49,49,49,49,49,49,96,49,49,49,49,49,49,60,109,49,49,49,125,49,49,49,49,109,49,49,]),'minus':([34,37,40,44,48,49,54,55,56,57,61,62,63,65,66,84,86,89,90,91,92,94,95,97,98,100,101,102,104,105,112,115,118,123,124,127,130,131,135,136,139,140,141,],[-56,-53,-54,-55,73,-52,-46,73,-41,-40,73,73,73,73,73,-51,-28,73,73,-44,73,-42,-43,-45,73,-23,73,73,73,73,73,-22,73,-36,-27,-19,73,73,-18,-26,-21,73,-20,]),'loop':([34,37,40,44,49,54,56,57,62,66,84,86,89,90,91,92,94,95,97,98,100,105,115,123,124,127,135,136,139,141,],[-56,-53,-54,-55,-52,-46,-41,-40,-50,88,-51,-28,-48,-49,-44,-47,-42,-43,-45,-17,-23,-31,-22,-36,-27,-19,-18,-26,-21,-20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'class_ast':([0,5,],[1,1,]),'exp_list':([46,87,],[64,111,]),'let_binding_list':([41,82,],[58,106,]),'feature_list':([9,15,17,],[11,20,22,]),'ast':([0,],[2,]),'param_list':([77,114,116,134,],[99,126,128,138,]),'case_element':([85,121,],[108,108,]),'feature':([9,15,17,],[12,12,12,]),'case_elements':([85,121,],[110,132,]),'class_list':([0,5,],[3,7,]),'exp':([29,35,36,38,42,43,45,46,47,67,68,69,70,72,73,75,76,77,78,80,81,87,88,103,114,116,119,120,134,137,],[48,54,55,56,61,62,63,65,66,89,90,91,92,94,95,97,98,101,102,104,105,65,112,118,101,101,130,131,101,140,]),'formal_list':([19,32,],[25,52,]),'let_binding':([41,82,],[59,59,]),'formal':([19,32,],[26,26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ast","S'",1,None,None,None),
  ('ast -> class_list','ast',1,'p_ast','main.py',365),
  ('class_list -> class_ast semi class_list','class_list',3,'p_class_list','main.py',369),
  ('class_list -> class_ast semi','class_list',2,'p_class_list','main.py',370),
  ('class_ast -> class type lbrace rbrace','class_ast',4,'p_class_no_inherits_no_body','main.py',377),
  ('class_ast -> class type lbrace feature_list rbrace','class_ast',5,'p_class_no_inherits','main.py',380),
  ('class_ast -> class type inherits type lbrace rbrace','class_ast',6,'p_class_inherits_no_body','main.py',383),
  ('class_ast -> class type inherits type lbrace feature_list rbrace','class_ast',7,'p_class_inherits','main.py',386),
  ('feature_list -> feature semi feature_list','feature_list',3,'p_feature_list','main.py',390),
  ('feature_list -> feature semi','feature_list',2,'p_feature_list','main.py',391),
  ('feature -> identifier colon type','feature',3,'p_attribute_no_init','main.py',398),
  ('feature -> identifier colon type larrow exp','feature',5,'p_attribute_init','main.py',401),
  ('feature -> identifier lparen formal_list rparen colon type lbrace exp rbrace','feature',9,'p_feature_method','main.py',404),
  ('feature -> identifier lparen rparen colon type lbrace exp rbrace','feature',8,'p_feature_method_no_formals','main.py',407),
  ('formal_list -> formal comma formal_list','formal_list',3,'p_formal_list','main.py',411),
  ('formal_list -> formal','formal_list',1,'p_formal_list','main.py',412),
  ('formal -> identifier colon type','formal',3,'p_formal','main.py',418),
  ('exp -> identifier larrow exp','exp',3,'p_exp_assign','main.py',422),
  ('exp -> exp dot identifier lparen param_list rparen','exp',6,'p_exp_dynamic_dispatch','main.py',425),
  ('exp -> exp dot identifier lparen rparen','exp',5,'p_exp_dynamic_dispatch','main.py',426),
  ('exp -> exp at type dot identifier lparen param_list rparen','exp',8,'p_exp_static_dispatch','main.py',432),
  ('exp -> exp at type dot identifier lparen rparen','exp',7,'p_exp_static_dispatch','main.py',433),
  ('exp -> identifier lparen param_list rparen','exp',4,'p_exp_self_dispatch','main.py',439),
  ('exp -> identifier lparen rparen','exp',3,'p_exp_self_dispatch','main.py',440),
  ('param_list -> exp comma param_list','param_list',3,'p_param_list','main.py',446),
  ('param_list -> exp','param_list',1,'p_param_list','main.py',447),
  ('exp -> if exp then exp else exp fi','exp',7,'p_exp_if','main.py',453),
  ('exp -> while exp loop exp pool','exp',5,'p_exp_while','main.py',456),
  ('exp -> lbrace exp_list rbrace','exp',3,'p_exp_block','main.py',459),
  ('exp_list -> exp semi exp_list','exp_list',3,'p_exp_list','main.py',462),
  ('exp_list -> exp semi','exp_list',2,'p_exp_list','main.py',463),
  ('exp -> let let_binding_list in exp','exp',4,'p_exp_let','main.py',469),
  ('let_binding_list -> let_binding comma let_binding_list','let_binding_list',3,'p_let_binding_list','main.py',472),
  ('let_binding_list -> let_binding','let_binding_list',1,'p_let_binding_list','main.py',473),
  ('let_binding -> identifier colon type','let_binding',3,'p_let_binding','main.py',476),
  ('let_binding -> identifier colon type larrow exp','let_binding',5,'p_let_binding','main.py',477),
  ('exp -> case exp of case_elements esac','exp',5,'p_exp_case','main.py',483),
  ('case_elements -> case_element semi case_elements','case_elements',3,'p_case_elems','main.py',486),
  ('case_elements -> case_element semi','case_elements',2,'p_case_elems','main.py',487),
  ('case_element -> identifier colon type rarrow exp','case_element',5,'p_case_elem','main.py',490),
  ('exp -> new type','exp',2,'p_exp_new','main.py',493),
  ('exp -> isvoid exp','exp',2,'p_exp_isvoid','main.py',496),
  ('exp -> exp plus exp','exp',3,'p_exp_plus','main.py',499),
  ('exp -> exp minus exp','exp',3,'p_exp_minus','main.py',502),
  ('exp -> exp times exp','exp',3,'p_exp_times','main.py',505),
  ('exp -> exp divide exp','exp',3,'p_exp_divide','main.py',508),
  ('exp -> tilde exp','exp',2,'p_exp_tilde','main.py',511),
  ('exp -> exp lt exp','exp',3,'p_exp_lt','main.py',514),
  ('exp -> exp le exp','exp',3,'p_exp_le','main.py',517),
  ('exp -> exp equals exp','exp',3,'p_exp_eq','main.py',520),
  ('exp -> not exp','exp',2,'p_exp_not','main.py',523),
  ('exp -> lparen exp rparen','exp',3,'p_exp_parens','main.py',526),
  ('exp -> identifier','exp',1,'p_exp_identifier','main.py',530),
  ('exp -> integer','exp',1,'p_exp_integer','main.py',533),
  ('exp -> string','exp',1,'p_exp_string','main.py',536),
  ('exp -> true','exp',1,'p_exp_true','main.py',539),
  ('exp -> false','exp',1,'p_exp_false','main.py',542),
]
